/* ========================================================================
 * Copyright 2014 Arquidalgos
 *
 * Licensed under the MIT, The MIT License (MIT)
 * Copyright (c) 2014 Arquidalgos

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
 * ========================================================================


Source generated by CrudMaker version 1.0.0.201408112050

*/

package co.edu.uniandes.csw.Arquidalgos.tumeop.logic.mock;
import java.util.ArrayList;
import java.util.List;

import co.edu.uniandes.csw.Arquidalgos.tumeop.logic.dto.TuMeOpDTO;
import co.edu.uniandes.csw.Arquidalgos.tumeop.logic.api.ITuMeOpLogicService;
import co.edu.uniandes.csw.Arquidalgos.tumeop.master.logic.api._ITuMeOpMasterLogicService;
import co.edu.uniandes.csw.Arquidalgos.tumeop.master.logic.dto.TuMeOpMasterDTO;
import co.edu.uniandes.csw.Arquidalgos.usuario.logic.api.IUsuarioLogicService;
import co.edu.uniandes.csw.Arquidalgos.tienda.logic.api.ITiendaLogicService;
import co.edu.uniandes.csw.Arquidalgos.usuario.logic.dto.UsuarioDTO;
import co.edu.uniandes.csw.Arquidalgos.tienda.logic.dto.TiendaDTO;
import javax.inject.Inject;


public abstract class _TuMeOpMasterMockLogicService implements _ITuMeOpMasterLogicService {

    protected static ArrayList<TuMeOpMasterDTO> tuMeOpMasterDtosList = new ArrayList<TuMeOpMasterDTO>() ;
    @Inject
    protected IUsuarioLogicService usuarioPersistance;
    @Inject
    protected ITiendaLogicService tiendaPersistance;
    @Inject
    protected ITuMeOpLogicService tuMeOpPersistance;

    public TuMeOpMasterDTO createMasterTuMeOp(TuMeOpMasterDTO tuMeOp) {

        tuMeOpPersistance.createTuMeOp(tuMeOp.getTuMeOpEntity());
        for (UsuarioDTO dto : tuMeOp.getCreateusuariosOp()) {
            usuarioPersistance.createUsuario(dto);
        }
        for (TiendaDTO dto : tuMeOp.getCreatetiendaOP()) {
            tiendaPersistance.createTienda(dto);
        }
        tuMeOpMasterDtosList.add(tuMeOp);
        return tuMeOp;
    }

    public TuMeOpMasterDTO getMasterTuMeOp(Long id) {
        for (TuMeOpMasterDTO tuMeOpMasterDTO : tuMeOpMasterDtosList) {
            if (tuMeOpMasterDTO.getTuMeOpEntity().getId() == id) {
                return tuMeOpMasterDTO;
            }
        }

        return null;
    }

    public void deleteMasterTuMeOp(Long id) {
        for (TuMeOpMasterDTO tuMeOpMasterDTO : tuMeOpMasterDtosList) {
            if (tuMeOpMasterDTO.getTuMeOpEntity().getId() == id) {

                for (UsuarioDTO dto : tuMeOpMasterDTO.getCreateusuariosOp()) {
                    usuarioPersistance.deleteUsuario(dto.getId());
                }
                tuMeOpPersistance.deleteTuMeOp(tuMeOpMasterDTO.getId());
                tuMeOpMasterDtosList.remove(tuMeOpMasterDTO);
                for (TiendaDTO dto : tuMeOpMasterDTO.getCreatetiendaOP()) {
                    tiendaPersistance.deleteTienda(dto.getId());
                }
                tuMeOpPersistance.deleteTuMeOp(tuMeOpMasterDTO.getId());
                tuMeOpMasterDtosList.remove(tuMeOpMasterDTO);
            }
        }

    }

    public void updateMasterTuMeOp(TuMeOpMasterDTO tuMeOp) {

        // update Usuario
        if (tuMeOp.getUpdateusuariosOp() != null) {
            for (UsuarioDTO dto : tuMeOp.getUpdateusuariosOp()) {
                usuarioPersistance.updateUsuario(dto);
            }
        }
        // persist new Usuario
        if (tuMeOp.getCreateusuariosOp() != null) {
            for (UsuarioDTO dto : tuMeOp.getCreateusuariosOp()) {
                UsuarioDTO persistedUsuarioDTO = usuarioPersistance.createUsuario(dto);
                dto = persistedUsuarioDTO;
            }
        }
        // delete Usuario
        if (tuMeOp.getDeleteusuariosOp() != null) {
            for (UsuarioDTO dto : tuMeOp.getDeleteusuariosOp()) {

                usuarioPersistance.deleteUsuario(dto.getId());
            }
        }
        // update Tienda
        if (tuMeOp.getUpdatetiendaOP() != null) {
            for (TiendaDTO dto : tuMeOp.getUpdatetiendaOP()) {
                tiendaPersistance.updateTienda(dto);
            }
        }
        // persist new Tienda
        if (tuMeOp.getCreatetiendaOP() != null) {
            for (TiendaDTO dto : tuMeOp.getCreatetiendaOP()) {
                TiendaDTO persistedTiendaDTO = tiendaPersistance.createTienda(dto);
                dto = persistedTiendaDTO;
            }
        }
        // delete Tienda
        if (tuMeOp.getDeletetiendaOP() != null) {
            for (TiendaDTO dto : tuMeOp.getDeletetiendaOP()) {

                tiendaPersistance.deleteTienda(dto.getId());
            }
        }
    }
}