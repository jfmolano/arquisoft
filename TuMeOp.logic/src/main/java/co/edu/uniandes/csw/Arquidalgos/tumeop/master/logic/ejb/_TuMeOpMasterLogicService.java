/* ========================================================================
 * Copyright 2014 Arquidalgos
 *
 * Licensed under the MIT, The MIT License (MIT)
 * Copyright (c) 2014 Arquidalgos

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
 * ========================================================================


Source generated by CrudMaker version 1.0.0.201408112050

*/

package co.edu.uniandes.csw.Arquidalgos.tumeop.master.logic.ejb;

import co.edu.uniandes.csw.Arquidalgos.usuario.logic.dto.UsuarioDTO;
import co.edu.uniandes.csw.Arquidalgos.usuario.persistence.api.IUsuarioPersistence;
import co.edu.uniandes.csw.Arquidalgos.tienda.logic.dto.TiendaDTO;
import co.edu.uniandes.csw.Arquidalgos.tienda.persistence.api.ITiendaPersistence;
import co.edu.uniandes.csw.Arquidalgos.tumeop.logic.dto.TuMeOpDTO;
import co.edu.uniandes.csw.Arquidalgos.tumeop.master.logic.api._ITuMeOpMasterLogicService;
import co.edu.uniandes.csw.Arquidalgos.tumeop.master.logic.dto.TuMeOpMasterDTO;
import co.edu.uniandes.csw.Arquidalgos.tumeop.master.persistence.api.ITuMeOpMasterPersistence;
import co.edu.uniandes.csw.Arquidalgos.tumeop.master.persistence.entity.TuMeOpusuariosOpEntity;
import co.edu.uniandes.csw.Arquidalgos.tumeop.master.persistence.entity.TuMeOptiendaOPEntity;
import co.edu.uniandes.csw.Arquidalgos.tumeop.persistence.api.ITuMeOpPersistence;
import javax.inject.Inject;

public abstract class _TuMeOpMasterLogicService implements _ITuMeOpMasterLogicService {

    @Inject
    protected ITuMeOpPersistence tumeopPersistance;
    @Inject
    protected ITuMeOpMasterPersistence tumeopMasterPersistance;
    @Inject
    protected IUsuarioPersistence usuarioPersistance;
    @Inject
    protected ITiendaPersistence tiendaPersistance;

    public TuMeOpMasterDTO createMasterTuMeOp(TuMeOpMasterDTO tumeop) {
        TuMeOpDTO persistedTuMeOpDTO = tumeopPersistance.createTuMeOp(tumeop.getTuMeOpEntity());
        if (tumeop.getCreateusuariosOp() != null) {
            for (UsuarioDTO usuarioDTO : tumeop.getCreateusuariosOp()) {
                UsuarioDTO createdUsuarioDTO = usuarioPersistance.createUsuario(usuarioDTO);
                TuMeOpusuariosOpEntity tumeopUsuarioEntity = new TuMeOpusuariosOpEntity(persistedTuMeOpDTO.getId(), createdUsuarioDTO.getId());
                tumeopMasterPersistance.createTuMeOpusuariosOpEntity(tumeopUsuarioEntity);
            }
        }
        if (tumeop.getCreatetiendaOP() != null) {
            for (TiendaDTO tiendaDTO : tumeop.getCreatetiendaOP()) {
                TiendaDTO createdTiendaDTO = tiendaPersistance.createTienda(tiendaDTO);
                TuMeOptiendaOPEntity tumeopTiendaEntity = new TuMeOptiendaOPEntity(persistedTuMeOpDTO.getId(), createdTiendaDTO.getId());
                tumeopMasterPersistance.createTuMeOptiendaOPEntity(tumeopTiendaEntity);
            }
        }
        // update usuario
        if (tumeop.getUpdateusuariosOp() != null) {
            for (UsuarioDTO usuarioDTO : tumeop.getUpdateusuariosOp()) {
                usuarioPersistance.updateUsuario(usuarioDTO);
                TuMeOpusuariosOpEntity tumeopUsuarioEntity = new TuMeOpusuariosOpEntity(persistedTuMeOpDTO.getId(), usuarioDTO.getId());
                tumeopMasterPersistance.createTuMeOpusuariosOpEntity(tumeopUsuarioEntity);
            }
        }
        // update tienda
        if (tumeop.getUpdatetiendaOP() != null) {
            for (TiendaDTO tiendaDTO : tumeop.getUpdatetiendaOP()) {
                tiendaPersistance.updateTienda(tiendaDTO);
                TuMeOptiendaOPEntity tumeopTiendaEntity = new TuMeOptiendaOPEntity(persistedTuMeOpDTO.getId(), tiendaDTO.getId());
                tumeopMasterPersistance.createTuMeOptiendaOPEntity(tumeopTiendaEntity);
            }
        }
        return tumeop;
    }

    public TuMeOpMasterDTO getMasterTuMeOp(Long id) {
        return tumeopMasterPersistance.getTuMeOp(id);
    }

    public void deleteMasterTuMeOp(Long id) {
        tumeopPersistance.deleteTuMeOp(id);
    }

    public void updateMasterTuMeOp(TuMeOpMasterDTO tumeop) {
        tumeopPersistance.updateTuMeOp(tumeop.getTuMeOpEntity());

        //---- FOR RELATIONSHIP
        // persist new usuario
        if (tumeop.getCreateusuariosOp() != null) {
            for (UsuarioDTO usuarioDTO : tumeop.getCreateusuariosOp()) {
                UsuarioDTO createdUsuarioDTO = usuarioPersistance.createUsuario(usuarioDTO);
                TuMeOpusuariosOpEntity tumeopUsuarioEntity = new TuMeOpusuariosOpEntity(tumeop.getTuMeOpEntity().getId(), createdUsuarioDTO.getId());
                tumeopMasterPersistance.createTuMeOpusuariosOpEntity(tumeopUsuarioEntity);
            }
        }
        // update usuario
        if (tumeop.getUpdateusuariosOp() != null) {
            for (UsuarioDTO usuarioDTO : tumeop.getUpdateusuariosOp()) {
                usuarioPersistance.updateUsuario(usuarioDTO);
            }
        }
        // delete usuario
        if (tumeop.getDeleteusuariosOp() != null) {
            for (UsuarioDTO usuarioDTO : tumeop.getDeleteusuariosOp()) {
                tumeopMasterPersistance.deleteTuMeOpusuariosOpEntity(tumeop.getTuMeOpEntity().getId(), usuarioDTO.getId());
                usuarioPersistance.deleteUsuario(usuarioDTO.getId());
            }
        }
        // persist new tienda
        if (tumeop.getCreatetiendaOP() != null) {
            for (TiendaDTO tiendaDTO : tumeop.getCreatetiendaOP()) {
                TiendaDTO createdTiendaDTO = tiendaPersistance.createTienda(tiendaDTO);
                TuMeOptiendaOPEntity tumeopTiendaEntity = new TuMeOptiendaOPEntity(tumeop.getTuMeOpEntity().getId(), createdTiendaDTO.getId());
                tumeopMasterPersistance.createTuMeOptiendaOPEntity(tumeopTiendaEntity);
            }
        }
        // update tienda
        if (tumeop.getUpdatetiendaOP() != null) {
            for (TiendaDTO tiendaDTO : tumeop.getUpdatetiendaOP()) {
                tiendaPersistance.updateTienda(tiendaDTO);
            }
        }
        // delete tienda
        if (tumeop.getDeletetiendaOP() != null) {
            for (TiendaDTO tiendaDTO : tumeop.getDeletetiendaOP()) {
                tumeopMasterPersistance.deleteTuMeOptiendaOPEntity(tumeop.getTuMeOpEntity().getId(), tiendaDTO.getId());
                tiendaPersistance.deleteTienda(tiendaDTO.getId());
            }
        }
    }
}
